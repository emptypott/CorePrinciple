package com.example.coreprinciple.accessstudy;

public class AccessControl {

    // 이미 여러자례 public이나 private과 같은 수식자를 사용했으나, 그에 관한 상세한 설명은 하지 않았다.
    // 먼저 패키지를 이해하지 않으면 설명할 수 없기 때문이다.

    // 4.1 패키지

    // 에서 패키지를 다뤘으므로, 이제부터는 액세스 제어에 관하여 상세히 설명하도록 하겠다.

    // 멤버의 액세스 제어

    // modifier 수식자. access control

    // 무지정이 곧 protected 이구나.
    // default modifier도 생겼었나.

    // 동일한 패키지 안이라면 자유롭게 참조할 수 있다.

    // Java에서는 동일한 패키지 안의 클래스이면 자유롭게 참조할 수 있는 것이 디폴트로 되어 있다.

    // 클래스의 캡슐화라는 객체 지향의 기본 이념에 역행하는 언어 사양이라고 생각하는 사람도 있을 것이다.

    // 그러나 패키지 안의 클래스는 동일한 개발자(또는 팀) 에 의해 개발된것이다. 합리적이라고 생각한다.

    // protected 도 동일한 패키지 안이라면 자유롭게 access 할 수 있다.

    // Java에서는 protected를 지정한 경우에도 동일한 패키지 안이라면,
    // 역시 자유롭게 액세스할 수 있다.

    // 즉 protected는 디폴트의 패키지 액세스에 추가하여 다른 패키지의 서브 클래스에 대해서도
    // 멤버를 공개한다는 것을 의미하고 있다.
    // 어디에서 누가 만들었는지 알 수 없는 서브 클래스에 비하면 패키지 안의 클래스는 신뢰할 수 있으므로
    // 우선 디폴트에서 패키지 액세스를 허용하고 protected를 작성하여 패키지 밖의 서브 클래스에 대해서도 액세스를
    // 허용하고 있는 것이다.

    // 그러나 protected를 작성함으로써 멤버가 더욱 보호받지 못하게 되다니, 좀 아이러니컬 한 느낌이 든다.

    // 멤버의 액세스 제어는 클래스 단위이다.

    //


}

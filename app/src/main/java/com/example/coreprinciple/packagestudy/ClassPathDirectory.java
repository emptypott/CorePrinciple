package com.example.coreprinciple.packagestudy;

public class ClassPathDirectory {

    // Java에서는 컴파일시 또는 실행시 CLASSPATH 환경 변수 또는
    // -classpath 옵션에 의해 지정된 클래스 패스에서 클래스를 검색한다.

    // 클래스 패스는 클래스 파일뿐 아니라 소스의 검색에도 사용된다.
    // 어떤 소스를 컴파일 할 때 javac는 그 소스가 사용하고 있는 클래스의 소스도 컴파일하는데,
    // 이 때에도 클래스 패스가 사용된다.

    // 이 경우는 -sourcepath 옵션을 사용할 수도 있다.

    // Java에서는 대부분의 환경에서 패키지가 그 환경의 파일 시스템의 디렉토리(폴더) 구조에 맵핑된다.

    // 패키지를 사용하는 경우 클래스 패스는 패키지 구조를 표현하는 디렉토리 구조의 가장 상위
    // 디렉토리를 포함하는 디렉토리를 가리켜야 한다.

    // 지금까지 계속 무명 패키지만 사용해온 사람(초보자는 보통 그럴 것이다)은 CLASSPATH 환경 변수를
    // 설정하지 않거나 설정한다 해도 피리어드, 현재 디렉토리만 설정하고 있다.

    // 이런 사람 (초보자) -> 처음으로 package 선언을 했을 때 어떻게 컴파일해야 할지,
    // 또는 어떻게 실행해야 좋을지 몰라 머리를 싸매야 하는 경우가 많을 것이다.

    // 클래스 패스는 패키지 구조를 표현하는 구조의 가장 상위 디렉토리를 포함하는 디렉토리를 향한다.
    // 예시 작성을 꼭 좀 해봐야 한다.

    // 클래스의 소스를 작성할 때 그 클래스가 무명 패키지에 속해 있지 않으면, 소스의 첫 부분에서 package 선언을 한다.
    // 그러나 모든 소스의 첫 부분에 패키지 이름을 써야 한다면 너무 번거로울 것이다.

    // 패키지 구조를 변경했을 때는 모든 소스를 수정해야 한다. 일반적으로

    // 패키지 구조와 디럭테리 구조가 동일하면 소스의 첫 부분에서 일일이 패키지를 지정하지 않아도 된다.

    // 다만 현재 사양에 있어서는 다음과 같은 2가지 이유 때문에 역시 각 소스에 package 선언을 해야만 한다.

    // 역자의 경우 위와 같이 컴파일 하지는 않는다. 위와 같이 컴파일 할 경우의 문제는 소스파일(.java)과
    // 클래스파일 (.class)이 같은 디렉토리에 존재하게 되어 모양이 좋지 않고 소스만 따로 관리하기가 어렵다.

    // 역자의 경우 소스 디렉토리와 컴파일된 클래스 디렉토리를 별도의 디렉토리에 관리하고 있다.
    // 예를 들면 최상위 디렉토리를 work 라고 했을 때 소스 파일의 경우 "work/src/패키지 구조" 로 관리하고
    // 클래스 파일은 "work/classes/패키지구조" 로 관리하고 있다.

    // 이렇게 관리할 경우 src 디렉토리에 있는 소스 파일의 컴파일 결과를 다른 디렉토리 (classes 디렉토리) 로
    // 이동 시켜야 하는데 최상위 디렉토리 에서 컴파일하는데 다음과 같이 -d 옵션을 이요하는 경우
    // 컴파일된 클래스 파일을 특정 디렉토리로 이동할 수 있다.

    // c:\work>javac -d .\classes .\src\com\jaso\Test.java

    // 위의 컴파일 명령은 src 디렉토리 아래에 있는 com.jaso 패키지의 Test.java 파일을 컴파일 하여
    // 클래스 파일을 work/classes 디렉토리 아래로 위치시키라는 명령이다.
    // 이렇게 하면

    // javac 는 해당 소스를 컴파일 한후, work/classes 디렉토리 아래에 패키지 구조와 동일한 디렉토리를 자동으로
    // 생성한 후 해당 디렉토리로 이동시킨다.
    // 따라서 위의 javac 결과는

    // work\classes\com\jaso\Test.class 가 생성된다.

    // 해당 클래스를 실행시키기 위해서는 책에서 설명한 것과 동일하게 전체 패키지명과 클래스명을 주면 된다.

    // 해당 클래스를 실행시키기 위해서는 책에서 설명한 것과 동일하게 전체 패키지명과 클래스명을 주면 된다.

    // c:\work>set CLASSPATH =.;
    // c:\work>java com.jaso.Test

    // 클래스 파일에는 "완전 한정 이름" 이 들어있다.
    // 4.1.2 에서는 그 클래스가 사용하고 있는 클래스 이름에 관하여 설명했으나
    // 그 클래스 파일에서 선언되어 있는 클래스 이름 자체도 역시 완전 한정 이름이 들어있다.

    // 따라서 컴파일러에 클래스의 완전한정이름을 알려주기 위해

    // 어떤 디렉토리에 있어도 컴파일은 할 수 있다.
    // 그러나 실제로는 ㅓavac는 소스가 있는 디렉토리에서 실행할 수 있다.
    // 패키지 계층과 디렉토리 계층이 일치한다는 규칙은 이하의 용도에 쓰일 뿐이다.

    // 어떤 소스를 컴파일 할 때 그 소스가 사용하고 있는 클래스의 소스 또는 클래스 파일을 검색한다.
    // 실핼할 때 클래스를 검색한다ㅡ.

    // 컴파일하는 소스 자체는 어디에 두든 관계 없다.
    // 그렇기 때문에 명시적인 package 선언이 없으면 어떤 패키지에 속하는지 컴파일러가 알 수 없는 것이다.

    //
}
